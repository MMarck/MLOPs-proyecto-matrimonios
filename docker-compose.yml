services:
  # PostgreSQL para MLflow y Airflow
  postgres:
    image: postgres:15
    container_name: divorce_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_databases.sql:/docker-entrypoint-initdb.d/init_databases.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO para almacenamiento S3
  minio:
    image: minio/minio:latest
    container_name: divorce_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Configurar buckets de MinIO
  minio_setup:
    image: minio/mc:latest
    container_name: divorce_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Configurando MinIO...';
      until (/usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin123) do echo 'Esperando MinIO...' && sleep 2; done;
      echo 'Creando buckets...';
      /usr/bin/mc mb minio/mlflow-artifacts --ignore-existing;
      /usr/bin/mc mb minio/models --ignore-existing;
      /usr/bin/mc mb minio/data --ignore-existing;
      echo 'Configurando políticas...';
      /usr/bin/mc anonymous set public minio/mlflow-artifacts;
      /usr/bin/mc anonymous set public minio/models;
      echo 'MinIO configurado correctamente';
      "

  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    container_name: divorce_mlflow
    depends_on:
      postgres:
        condition: service_healthy
      minio_setup:
        condition: service_completed_successfully
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres@postgres:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts/
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=us-east-1
    command: >
      bash -c "
      echo 'Instalando MLflow...';
      pip install --no-cache-dir mlflow==2.10.2 psycopg2-binary==2.9.9 boto3==1.34.44;
      echo 'Iniciando MLflow server...';
      mlflow server 
        --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow_db
        --default-artifact-root s3://mlflow-artifacts/
        --host 0.0.0.0 
        --port 5000 
        --serve-artifacts
      "
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Apache Airflow (Scheduler y Webserver)
  airflow-init:
    image: apache/airflow:2.8.0-python3.9
    container_name: divorce_airflow_init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=QKKhNYSNrCxNRVJ9FN9XGo7M4CZzqCBFXmZkN4bV8wY=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "

  airflow-scheduler:
    image: apache/airflow:2.8.0-python3.9
    container_name: divorce_airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      mlflow:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=QKKhNYSNrCxNRVJ9FN9XGo7M4CZzqCBFXmZkN4bV8wY=
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    command: airflow scheduler
    restart: unless-stopped

  airflow-webserver:
    image: apache/airflow:2.8.0-python3.9
    container_name: divorce_airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=QKKhNYSNrCxNRVJ9FN9XGo7M4CZzqCBFXmZkN4bV8wY=
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: airflow webserver
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API de Predicción de Divorcios
  divorce-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: divorce_api
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_NAME=DivorcePredictor
      - MODEL_STAGE=Production
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=us-east-1
      - API_HOST=0.0.0.0
      - API_PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  mlflow_data:
    driver: local
  airflow_logs:
    driver: local

networks:
  default:
    name: divorce_prediction_network
    driver: bridge